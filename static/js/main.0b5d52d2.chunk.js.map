{"version":3,"sources":["pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","Home","state","pinCodeIdCounter","notification_msg","triggered","message","classes","this","props","onSnackBarHandleClose","setState","Container","component","maxWidth","CssBaseline","className","paper","Avatar","avatar","LockOutlined","form","noValidate","Grid","container","spacing","item","xs","sm","TextField","autoComplete","name","required","fullWidth","id","label","autoFocus","event","pincodeCounter","parseInt","Object","assign","pincodeArray","iter","push","getPinCodeIds","map","object","String","Button","submit","onClick","FormControlLabel","control","Checkbox","value","type","Box","mt","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","action","Fragment","IconButton","size","aria-label","CloseRounded","fontSize","Component","withStyles","theme","marginTop","display","flexDirection","alignItems","margin","backgroundColor","palette","secondary","main","width","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b5d52d2.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport {IconButton, Snackbar, withStyles} from \"@material-ui/core\";\nimport {CloseRounded, LockOutlined} from \"@material-ui/icons\";\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright Â© '}\n            <Link color=\"inherit\" href=\"https://hackerstribe.com/\">\n                Hackerstribe\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst useStyles =(theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n});\n\nclass Home extends Component{\n    state= {\n        pinCodeIdCounter: 0,\n        notification_msg: {\n            triggered: false,\n            message: \"\"\n        }\n    }\n\n    render(){\n        const {classes} = this.props;\n\n        const getPinCodeIds=(event)=>{\n            let pincodeCounter= parseInt(Object.assign(this.state.pinCodeIdCounter))\n            let pincodeArray=[]\n            let iter=0\n            for(iter; iter<=pincodeCounter; iter++){\n                pincodeArray.push(iter)\n            }\n\n            return pincodeArray\n\n        }\n\n        const onSnackBarHandleClose=()=>{\n            this.setState({\n                notification_msg: {\n                    triggered: false,\n                    message: \"\"\n                }\n            })\n        }\n\n        const pincodeIdIncrementer=()=>{\n\n            let pincodeCounter= parseInt(Object.assign(this.state.pinCodeIdCounter))\n\n            if(pincodeCounter>=4){\n                this.setState({\n                    notification_msg: {\n                        triggered: true,\n                        message: \"Only 5 pincodes per user are allowed to be tracked\"\n                    }\n                })\n            }else{\n                pincodeCounter++\n                this.setState({\n                    pinCodeIdCounter: pincodeCounter\n                })\n            }\n        }\n\n        return (\n            <Container component=\"main\" maxWidth=\"xs\">\n                <CssBaseline />\n                <div className={classes.paper}>\n                    <Avatar className={classes.avatar}>\n                        <LockOutlined />\n                    </Avatar>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Register\n                    </Typography>\n                    <form className={classes.form} noValidate>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    autoComplete=\"fname\"\n                                    name=\"firstName\"\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    id=\"firstName\"\n                                    label=\"First Name\"\n                                    autoFocus\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    id=\"lastName\"\n                                    label=\"Last Name\"\n                                    name=\"lastName\"\n                                    autoComplete=\"lname\"\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    id=\"email\"\n                                    label=\"Email Address\"\n                                    name=\"email\"\n                                    autoComplete=\"email\"\n                                />\n                            </Grid>\n\n                            <Grid item xs={12}>\n                                <TextField\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    id=\"phone\"\n                                    label=\"Mobile Number (Please enter 10 digit number)\"\n                                    name=\"phone\"\n                                    autoComplete=\"phone\"\n                                />\n                            </Grid>\n                            {getPinCodeIds().map(object=>(\n                                <Grid item xs={12}>\n                                    <TextField\n                                        variant=\"outlined\"\n                                        required\n                                        fullWidth\n                                        name=\"pincode\"\n                                        label=\"Pincode\"\n                                        id={\"pincode-\"+String(object)}\n                                    />\n                                </Grid>\n                            ))}\n\n                            <Button\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                className={classes.submit}\n                                onClick={pincodeIdIncrementer}\n                            >\n                                Add Pincodes\n                            </Button>\n\n                            <Grid item xs={12}>\n                                <FormControlLabel\n                                    control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\n                                    label=\"I want to receive updates and notifications via email.\"\n                                />\n                            </Grid>\n                        </Grid>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                        >\n                            Register\n                        </Button>\n                    </form>\n                </div>\n                <Box mt={5}>\n                    <Copyright />\n                </Box>\n\n\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'left',\n                    }}\n                    open={this.state.notification_msg.triggered}\n                    autoHideDuration={6000}\n                    onClose={onSnackBarHandleClose}\n                    message={this.state.notification_msg.message}\n                    action={\n                        <React.Fragment>\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={onSnackBarHandleClose}>\n                                <CloseRounded fontSize=\"small\" />\n                            </IconButton>\n                        </React.Fragment>\n                    }\n                />\n            </Container>\n        );\n    }\n}\n\nexport default withStyles(useStyles)(Home)","import Home from \"./pages/Home\";\n\nfunction App() {\n  return (\n    <div>\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}