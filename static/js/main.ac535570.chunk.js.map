{"version":3,"sources":["pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Copyright","Typography","variant","color","align","Link","href","Home","state","form_details","email","age","pincode_0","pincode_1","pincode_2","pincode_3","pincode_4","pinCodeIdCounter","notification_msg","triggered","message","error_notification_msg","classes","this","props","onInputChange","event","Object","assign","target","id","value","setState","onSnackBarHandleClose","Container","component","maxWidth","CssBaseline","className","paper","form","noValidate","Grid","container","spacing","item","xs","TextField","required","fullWidth","label","name","autoComplete","type","onChange","pincodeCounter","parseInt","pincodeArray","iter","push","getPinCodeIds","map","object","index","String","Button","submit","onClick","console","log","form_data","test","isNaN","pinNumber","length","Box","mt","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","action","Fragment","IconButton","size","aria-label","CloseRounded","fontSize","elevation","severity","Component","withStyles","theme","marginTop","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","width","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac535570.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport {IconButton, Snackbar, withStyles} from \"@material-ui/core\";\r\nimport {CloseRounded} from \"@material-ui/icons\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Made with loads of \\u2615 by '}\r\n            <Link color=\"inherit\" href=\"https://hackerstribe.tech/\">\r\n                Hacker's Tribe Foundation\r\n            </Link>{' '}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = (theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n});\r\n\r\nclass Home extends Component {\r\n\r\n    state = {\r\n        form_details: {\r\n            email: \"\",\r\n            age: \"\",\r\n            pincode_0: \"\",\r\n            pincode_1: \"\",\r\n            pincode_2: \"\",\r\n            pincode_3: \"\",\r\n            pincode_4: \"\"\r\n        },\r\n        pinCodeIdCounter: 0,\r\n        notification_msg: {\r\n            triggered: false,\r\n            message: \"\"\r\n        },\r\n        error_notification_msg: {\r\n            triggered: false,\r\n            message: \"\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n\r\n        const onInputChange= (event)=>{\r\n            let form_details = Object.assign({}, this.state.form_details)\r\n            form_details[event.target.id] = event.target.value\r\n            this.setState({\r\n                form_details: form_details\r\n            })\r\n        }\r\n\r\n        const onSubmitForm= (event)=>{\r\n            let form_data= Object.assign({}, this.state.form_details)\r\n\r\n            if (!(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(form_data.email)))\r\n            {\r\n\r\n                //console.log(\"Incorrect Email\")\r\n                this.setState({\r\n                    form_details: {\r\n                        email: \"\",\r\n                        age: \"\",\r\n                        pincode_0: \"\",\r\n                        pincode_1: \"\",\r\n                        pincode_2: \"\",\r\n                        pincode_3: \"\",\r\n                        pincode_4: \"\"\r\n                    },\r\n                    error_notification_msg: {\r\n                        triggered: true,\r\n                        message: \"Error: Incorrect email address\"\r\n                    }\r\n                })\r\n\r\n                return null;\r\n\r\n            }\r\n\r\n            let age= parseInt(form_data.age)\r\n            if(isNaN(age)){\r\n                //console.log(\"Incorrect Age\")\r\n                this.setState({\r\n                    form_details: {\r\n                        email: \"\",\r\n                        age: \"\",\r\n                        pincode_0: \"\",\r\n                        pincode_1: \"\",\r\n                        pincode_2: \"\",\r\n                        pincode_3: \"\",\r\n                        pincode_4: \"\"\r\n                    },\r\n                    error_notification_msg: {\r\n                        triggered: true,\r\n                        message: \"Error: Incorrect age\"\r\n                    }\r\n                })\r\n\r\n                return null;\r\n            }else if(age>130 || age<0){\r\n                this.setState({\r\n                    form_details: {\r\n                        email: \"\",\r\n                        age: \"\",\r\n                        pincode_0: \"\",\r\n                        pincode_1: \"\",\r\n                        pincode_2: \"\",\r\n                        pincode_3: \"\",\r\n                        pincode_4: \"\"\r\n                    },\r\n                    error_notification_msg: {\r\n                        triggered: true,\r\n                        message: \"Error: Value of age should be between 0-130\"\r\n                    }\r\n                })\r\n\r\n                return null;\r\n            }\r\n\r\n            form_data.age= parseInt(form_data.age)\r\n\r\n            let iter=0\r\n            for(iter; iter<=4; iter++){\r\n                if(form_data[\"pincode_\"+iter]===\"\"){\r\n                    form_data[\"pincode_\"+iter]=0\r\n                }else{\r\n                    let pinNumber= parseInt(form_data[\"pincode_\"+iter])\r\n                    if(isNaN(pinNumber) || String(pinNumber).length>6){\r\n                        //console.log(\"Incorrect Age\")\r\n                        this.setState({\r\n                            form_details: {\r\n                                email: \"\",\r\n                                age: \"\",\r\n                                pincode_0: \"\",\r\n                                pincode_1: \"\",\r\n                                pincode_2: \"\",\r\n                                pincode_3: \"\",\r\n                                pincode_4: \"\"\r\n                            },\r\n                            error_notification_msg: {\r\n                                triggered: true,\r\n                                message: \"Error: Incorrect pincode\"\r\n                            }\r\n                        })\r\n\r\n                        return null;\r\n                    }else{\r\n                        form_data[\"pincode_\"+iter]=parseInt(form_data[\"pincode_\"+iter])\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Need to send request to backend\r\n            console.log(form_data)\r\n            this.setState({\r\n                notification_msg: {\r\n                    triggered: true,\r\n                    message: \"Request sent to COWIN, you shall receive a email with details\"\r\n                }\r\n            })\r\n\r\n        }\r\n\r\n        const getPinCodeIds = (event) => {\r\n            let pincodeCounter = parseInt(Object.assign(this.state.pinCodeIdCounter))\r\n            let pincodeArray = []\r\n            let iter = 0\r\n            for (iter; iter <= pincodeCounter; iter++) {\r\n                pincodeArray.push(iter)\r\n            }\r\n            return pincodeArray\r\n        }\r\n\r\n        const onSnackBarHandleClose = () => {\r\n            this.setState({\r\n                notification_msg: {\r\n                    triggered: false,\r\n                    message: \"\"\r\n                }\r\n            })\r\n        }\r\n\r\n        const onErrorSnackBarHandleClose = () => {\r\n            this.setState({\r\n                error_notification_msg: {\r\n                    triggered: false,\r\n                    message: \"\"\r\n                }\r\n            })\r\n        }\r\n\r\n        const pincodeIdIncrementer = () => {\r\n\r\n            let pincodeCounter = parseInt(Object.assign(this.state.pinCodeIdCounter))\r\n\r\n            if (pincodeCounter >= 4) {\r\n                this.setState({\r\n                    notification_msg: {\r\n                        triggered: true,\r\n                        message: \"Only 5 pincodes per user are allowed to be tracked\"\r\n                    }\r\n                })\r\n            } else {\r\n                pincodeCounter++\r\n                console.log(\"pincode counter is \" + pincodeCounter)\r\n                this.setState({\r\n                    pinCodeIdCounter: pincodeCounter\r\n                })\r\n            }\r\n        }\r\n\r\n        const renderPincodeFields = () => {\r\n            console.log(\"pincodeCounter\" + this.state.pinCodeIdCounter)\r\n            let returnDiv = []\r\n            for (let i=0; i<=this.state.pinCodeIdCounter; i++) {\r\n                returnDiv.push(\r\n                    <Grid item xs={12}>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        required\r\n                                        fullWidth\r\n                                        name=\"pincode\"\r\n                                        label=\"Pincode\"\r\n                                        id=\"pincode\"\r\n                                        key = \"pincode\"\r\n                                        value={this.state.getPinCodeIds}\r\n                                        onChange={e => this.setState({ pincodeCounter: e.target.value })}\r\n                                    />\r\n                                </Grid>\r\n                )\r\n            }\r\n            return (\r\n                <div>\r\n                    {returnDiv}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <div className={classes.paper}>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Check for Vaccine Availability\r\n                    </Typography>\r\n                    <form className={classes.form} noValidate>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"email\"\r\n                                    label=\"Email Address\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"email\"\r\n                                    type=\"email\"\r\n                                    value={this.state.form_details.email}\r\n                                    onChange={onInputChange}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"age\"\r\n                                    label=\"Age\"\r\n                                    name=\"age\"\r\n                                    autoComplete=\"age\"\r\n                                    value={this.state.form_details.age}\r\n                                    onChange={onInputChange}\r\n                                />\r\n                            </Grid>\r\n\r\n                            {getPinCodeIds().map((object, index) => (\r\n                                <Grid item xs={12} key={index}>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        required\r\n                                        fullWidth\r\n                                        name=\"pincode\"\r\n                                        label={\"Pincode-\" + String(object+1)}\r\n                                        id={\"pincode_\" + String(object)}\r\n                                        value={this.state.form_details[\"pincode_\" + String(object)]}\r\n                                        onChange={onInputChange}\r\n                                    />\r\n                                </Grid>\r\n                            ))}\r\n\r\n                            <Grid item xs={12}>\r\n                                <Button\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.submit}\r\n                                    onClick={pincodeIdIncrementer}\r\n                                >\r\n                                    Add More Pincodes\r\n                                </Button>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                        <Button\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n\r\n                            onClick={onSubmitForm}\r\n                        >\r\n                            Check for Availability\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n                <Box mt={5}>\r\n                    <Copyright/>\r\n                </Box>\r\n\r\n                <Snackbar\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    open={this.state.notification_msg.triggered}\r\n                    autoHideDuration={6000}\r\n                    onClose={onSnackBarHandleClose}\r\n                    message={this.state.notification_msg.message}\r\n                    action={\r\n                        <React.Fragment>\r\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={onSnackBarHandleClose}>\r\n                                <CloseRounded fontSize=\"small\"/>\r\n                            </IconButton>\r\n                        </React.Fragment>\r\n                    }\r\n                />\r\n                <Snackbar open={this.state.error_notification_msg.triggered} autoHideDuration={6000} onClose={onErrorSnackBarHandleClose}>\r\n                    <MuiAlert elevation={6} variant=\"filled\" severity=\"error\">\r\n                        {this.state.error_notification_msg.message}\r\n                    </MuiAlert>\r\n                </Snackbar>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(Home)","import Home from \"./pages/Home\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Home />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}