{"version":3,"sources":["pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Home","state","pinCodeIdCounter","notification_msg","triggered","message","classes","this","props","onSnackBarHandleClose","setState","Container","component","maxWidth","CssBaseline","className","paper","Avatar","avatar","LockOutlined","Typography","variant","form","noValidate","Grid","container","spacing","item","xs","sm","TextField","autoComplete","name","required","fullWidth","id","label","autoFocus","event","pincodeCounter","parseInt","Object","assign","pincodeArray","iter","push","getPinCodeIds","map","object","String","Button","color","submit","onClick","FormControlLabel","control","Checkbox","value","type","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","action","Fragment","IconButton","size","aria-label","CloseRounded","fontSize","Component","withStyles","theme","marginTop","display","flexDirection","alignItems","margin","backgroundColor","palette","secondary","main","width","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5ade98b.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport {IconButton, Snackbar, withStyles} from \"@material-ui/core\";\r\nimport {CloseRounded, LockOutlined} from \"@material-ui/icons\";\r\n\r\nconst useStyles =(theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n});\r\n\r\nclass Home extends Component{\r\n    state= {\r\n        pinCodeIdCounter: 0,\r\n        notification_msg: {\r\n            triggered: false,\r\n            message: \"\"\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {classes} = this.props;\r\n\r\n        const getPinCodeIds=(event)=>{\r\n            let pincodeCounter= parseInt(Object.assign(this.state.pinCodeIdCounter))\r\n            let pincodeArray=[]\r\n            let iter=0\r\n            for(iter; iter<=pincodeCounter; iter++){\r\n                pincodeArray.push(iter)\r\n            }\r\n\r\n            return pincodeArray\r\n\r\n        }\r\n\r\n        const onSnackBarHandleClose=()=>{\r\n            this.setState({\r\n                notification_msg: {\r\n                    triggered: false,\r\n                    message: \"\"\r\n                }\r\n            })\r\n        }\r\n\r\n        const pincodeIdIncrementer=()=>{\r\n\r\n            let pincodeCounter= parseInt(Object.assign(this.state.pinCodeIdCounter))\r\n\r\n            if(pincodeCounter>=4){\r\n                this.setState({\r\n                    notification_msg: {\r\n                        triggered: true,\r\n                        message: \"Only 5 pincodes per user are allowed to be tracked\"\r\n                    }\r\n                })\r\n            }else{\r\n                pincodeCounter++\r\n                this.setState({\r\n                    pinCodeIdCounter: pincodeCounter\r\n                })\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlined />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Register\r\n                    </Typography>\r\n                    <form className={classes.form} noValidate>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    autoComplete=\"fname\"\r\n                                    name=\"firstName\"\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"firstName\"\r\n                                    label=\"First Name\"\r\n                                    autoFocus\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"lastName\"\r\n                                    label=\"Last Name\"\r\n                                    name=\"lastName\"\r\n                                    autoComplete=\"lname\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"email\"\r\n                                    label=\"Email Address\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"email\"\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"phone\"\r\n                                    label=\"Mobile Number (Please enter 10 digit number)\"\r\n                                    name=\"phone\"\r\n                                    autoComplete=\"phone\"\r\n                                />\r\n                            </Grid>\r\n                            {getPinCodeIds().map(object=>(\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        required\r\n                                        fullWidth\r\n                                        name=\"pincode\"\r\n                                        label=\"Pincode\"\r\n                                        id={\"pincode-\"+String(object)}\r\n                                    />\r\n                                </Grid>\r\n                            ))}\r\n\r\n                            <Button\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                className={classes.submit}\r\n                                onClick={pincodeIdIncrementer}\r\n                            >\r\n                                Add Pincodes\r\n                            </Button>\r\n\r\n                            <Grid item xs={12}>\r\n                                <FormControlLabel\r\n                                    control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\r\n                                    label=\"I want to receive updates and notifications via email.\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                        >\r\n                            Register\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n\r\n                <Snackbar\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    open={this.state.notification_msg.triggered}\r\n                    autoHideDuration={6000}\r\n                    onClose={onSnackBarHandleClose}\r\n                    message={this.state.notification_msg.message}\r\n                    action={\r\n                        <React.Fragment>\r\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={onSnackBarHandleClose}>\r\n                                <CloseRounded fontSize=\"small\" />\r\n                            </IconButton>\r\n                        </React.Fragment>\r\n                    }\r\n                />\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(Home)","import Home from \"./pages/Home\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Home />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}