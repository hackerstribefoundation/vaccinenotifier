{"version":3,"sources":["pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Copyright","Typography","variant","color","align","Link","href","Home","state","emailIdState","ageState","pinCodeIdCounter","notification_msg","triggered","message","classes","this","props","onSnackBarHandleClose","setState","Container","component","maxWidth","CssBaseline","className","paper","form","noValidate","Grid","container","spacing","item","xs","TextField","required","fullWidth","id","label","name","autoComplete","value","getEmailId","onChange","e","email","target","getAge","age","event","pincodeCounter","parseInt","Object","assign","pincodeArray","iter","push","getPinCodeIds","map","object","String","Button","submit","onClick","type","Box","mt","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","action","Fragment","IconButton","size","aria-label","CloseRounded","fontSize","Component","withStyles","theme","marginTop","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","width","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e9993e3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { IconButton, Snackbar, withStyles } from \"@material-ui/core\";\r\nimport { CloseRounded } from \"@material-ui/icons\";\r\n//import main from '../backend/vaccineNotifier';\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Made with loads of \\u2615 by '}\r\n            <Link color=\"inherit\" href=\"https://hackerstribe.tech/\">\r\n                Hacker's Tribe Foundation\r\n            </Link>{' '}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = (theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n});\r\n\r\nclass Home extends Component {\r\n\r\n    state = {\r\n        emailIdState: \"\",\r\n        ageState: \"\",\r\n        pinCodeIdCounter: 0,\r\n        notification_msg: {\r\n            triggered: false,\r\n            message: \"\"\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        const getEmailId = (event) => {\r\n            let emailIdState = parseInt(Object.assign(this.state.emailIdState))\r\n        }\r\n\r\n        const getAge = (event) => {\r\n            let ageState = parseInt(Object.assign(this.state.ageState))\r\n        }\r\n\r\n        const getPinCodeIds = (event) => {\r\n            let pincodeCounter = parseInt(Object.assign(this.state.pinCodeIdCounter))\r\n            let pincodeArray = []\r\n            let iter = 0\r\n            for (iter; iter <= pincodeCounter; iter++) {\r\n                pincodeArray.push(iter)\r\n            }\r\n            return pincodeArray\r\n        }\r\n\r\n        const onSnackBarHandleClose = () => {\r\n            this.setState({\r\n                notification_msg: {\r\n                    triggered: false,\r\n                    message: \"\"\r\n                }\r\n            })\r\n        }\r\n\r\n        const pincodeIdIncrementer = () => {\r\n\r\n            let pincodeCounter = parseInt(Object.assign(this.state.pinCodeIdCounter))\r\n\r\n            if (pincodeCounter >= 4) {\r\n                this.setState({\r\n                    notification_msg: {\r\n                        triggered: true,\r\n                        message: \"Only 5 pincodes per user are allowed to be tracked\"\r\n                    }\r\n                })\r\n            } else {\r\n                pincodeCounter++\r\n                this.setState({\r\n                    pinCodeIdCounter: pincodeCounter\r\n                })\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <div className={classes.paper}>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Check for Vaccine Availability\r\n                    </Typography>\r\n                    <form className={classes.form} noValidate>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"email\"\r\n                                    label=\"Email Address\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"email\"\r\n                                    value={this.state.getEmailId}\r\n                                    onChange={e => this.setState({ email: e.target.value })}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"age\"\r\n                                    label=\"Age\"\r\n                                    name=\"age\"\r\n                                    autoComplete=\"age\"\r\n                                    value={this.state.getAge}\r\n                                    onChange={e => this.setState({ age: e.target.value })}\r\n                                />\r\n                            </Grid>\r\n\r\n                            {getPinCodeIds().map(object=>(\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        required\r\n                                        fullWidth\r\n                                        name=\"pincode\"\r\n                                        label=\"Pincode\"\r\n                                        id={\"pincode-\"+String(object)}\r\n                                    />\r\n                                </Grid>\r\n                            ))}\r\n\r\n                            <Button\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                className={classes.submit}\r\n                                onClick={pincodeIdIncrementer}\r\n                            >\r\n                                Add More Pincodes\r\n                            </Button>\r\n\r\n                        </Grid>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            onClick=\"this.main()\"\r\n                        >\r\n                            Check for Availability\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n                <Box mt={5}>\r\n                    <Copyright />\r\n                </Box>\r\n\r\n                <Snackbar\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    open={this.state.notification_msg.triggered}\r\n                    autoHideDuration={6000}\r\n                    onClose={onSnackBarHandleClose}\r\n                    message={this.state.notification_msg.message}\r\n                    action={\r\n                        <React.Fragment>\r\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={onSnackBarHandleClose}>\r\n                                <CloseRounded fontSize=\"small\" />\r\n                            </IconButton>\r\n                        </React.Fragment>\r\n                    }\r\n                />\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(Home)","import Home from \"./pages/Home\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Home />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}